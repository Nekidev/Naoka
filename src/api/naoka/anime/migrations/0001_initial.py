# Generated by Django 4.2.7 on 2023-11-16 04:49

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('people', '0001_initial'),
        ('characters', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titles', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=2), help_text='An array of arrays containing two items each, being the first one the language code and the second one the title for that language.', size=None)),
                ('descriptions', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=2), blank=True, help_text='An array of arrays containing two items each, being the first one the language code and the second one the description for that language.', size=None)),
                ('image_cover_small', models.URLField(blank=True, null=True)),
                ('image_cover_medium', models.URLField(blank=True, null=True)),
                ('image_cover_large', models.URLField(blank=True, null=True)),
                ('image_banner', models.URLField(blank=True, null=True)),
                ('type', models.CharField(choices=[('tv', 'Tv'), ('ova', 'Ova'), ('ona', 'Ona'), ('movie', 'Movie'), ('music', 'Music'), ('special', 'Special')], default='tv', max_length=7)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('ongoing', 'Ongoing'), ('hiatus', 'Hiatus'), ('cancelled', 'Cancelled'), ('finished', 'Finished')], default='finished', max_length=9)),
                ('source', models.CharField(choices=[('original', 'Original'), ('anime', 'Anime'), ('manga', 'Manga'), ('novel', 'Novel'), ('web_novel', 'Web Novel'), ('light_novel', 'Light Novel'), ('visual_novel', 'Visual Novel'), ('video_game', 'Video Game'), ('doujinshi', 'Doujinshi'), ('live_action', 'Live Action'), ('game', 'Game'), ('comic', 'Comic'), ('picture_book', 'Picture Book'), ('multimedia_project', 'Mulitmedia Project'), ('other', 'Other')], default='other', max_length=18)),
                ('rating', models.CharField(choices=[('g', 'G'), ('pg', 'Pg'), ('pg_13', 'Pg 13'), ('r', 'R'), ('r_plus', 'R Plus'), ('rx', 'Rx')], default='g', max_length=6)),
                ('demographics', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
                ('broadcast_start', models.DateField(blank=True, null=True)),
                ('broadcast_end', models.DateField(blank=True, null=True)),
                ('broadcast_when', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), size=None), blank=True, size=None)),
                ('episodes_count', models.PositiveIntegerField(blank=True, null=True)),
                ('episodes_duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=2), blank=2, help_text='An array of arrays containing two items each, being the first one the site name and the second one the URL.', size=None)),
                ('streaming', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=2), blank=2, help_text='An array of arrays containing two items each, being the first one the site name and the second one the URL to stream the anime/the site URL.', size=None)),
                ('videos', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=2), blank=2, help_text='An array of arrays containing two items each, being the first one the video title and the second one the Youtube ID.', size=None)),
                ('characters', models.ManyToManyField(blank=True, related_name='anime', to='characters.characterrelationship')),
            ],
        ),
        migrations.CreateModel(
            name='AnimeGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('mappings', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(), blank=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('artists', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Studio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('mappings', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(), blank=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='SongRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('opening', 'Opening'), ('ending', 'Ending')], default='opening', max_length=7)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships', to='anime.song')),
            ],
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titles', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=2), help_text='An array of arrays containing two items each, being the first one the language code and the second one the title for that language.', size=None)),
                ('descriptions', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=2), blank=True, help_text='An array of arrays containing two items each, being the first one the language code and the second one the description for that language.', size=None)),
                ('number', models.PositiveIntegerField()),
                ('season', models.PositiveIntegerField(default=1)),
                ('duration', models.PositiveIntegerField(blank=True, null=True)),
                ('thumbnail_small', models.URLField(blank=True, null=True)),
                ('thumbnail_medium', models.URLField(blank=True, null=True)),
                ('thumbnail_large', models.URLField(blank=True, null=True)),
                ('mappings', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(), blank=True, size=None)),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='anime.anime')),
            ],
        ),
        migrations.CreateModel(
            name='AnimeRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('adaptation', 'Adaptation'), ('prequel', 'Prequel'), ('sequel', 'Sequel'), ('parent', 'Parent'), ('side_story', 'Side Story'), ('character', 'Character'), ('summary', 'Summary'), ('alternative', 'Alternative'), ('spin_off', 'Spin Off'), ('other', 'Other'), ('source', 'Source'), ('compilation', 'Compilation'), ('contains', 'Contains')], default='other', max_length=11)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships', to='anime.anime')),
            ],
        ),
        migrations.AddField(
            model_name='anime',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='anime', to='anime.animegenre'),
        ),
        migrations.AddField(
            model_name='anime',
            name='music',
            field=models.ManyToManyField(blank=True, related_name='anime', to='anime.songrelationship'),
        ),
        migrations.AddField(
            model_name='anime',
            name='related_anime',
            field=models.ManyToManyField(blank=True, related_name='anime', to='anime.animerelationship'),
        ),
        migrations.AddField(
            model_name='anime',
            name='staff',
            field=models.ManyToManyField(blank=True, related_name='anime', to='people.personrelationship'),
        ),
        migrations.AddField(
            model_name='anime',
            name='studios',
            field=models.ManyToManyField(blank=True, related_name='anime', to='anime.studio'),
        ),
    ]
